// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace AsenkronServer.XMessages {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class ChatCommand {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_AsenkronServer_XMessages_ChatCommand__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::AsenkronServer.XMessages.ChatCommand, global::AsenkronServer.XMessages.ChatCommand.Builder> internal__static_AsenkronServer_XMessages_ChatCommand__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static ChatCommand() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChFDaGF0Q29tbWFuZC5wcm90bxIYQXNlbmtyb25TZXJ2ZXIuWE1lc3NhZ2Vz" + 
            "ImQKC0NoYXRDb21tYW5kEg4KBlNlbmRlchgBIAIoCRIPCgdDb21tYW5kGAIg" + 
            "AigJEjQKCFVzZXJUeXBlGAMgAigOMiIuQXNlbmtyb25TZXJ2ZXIuWE1lc3Nh" + 
            "Z2VzLlVzZXJUeXBlKjQKCFVzZXJUeXBlEgkKBUFETUlOEAESCAoEVVNFUhAC" + 
            "EgcKA01PRBADEgoKBlNZU1RFTRAEQgJIAQ==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_AsenkronServer_XMessages_ChatCommand__Descriptor = Descriptor.MessageTypes[0];
          internal__static_AsenkronServer_XMessages_ChatCommand__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::AsenkronServer.XMessages.ChatCommand, global::AsenkronServer.XMessages.ChatCommand.Builder>(internal__static_AsenkronServer_XMessages_ChatCommand__Descriptor,
                  new string[] { "Sender", "Command", "UserType", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Enums
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public enum UserType {
    ADMIN = 1,
    USER = 2,
    MOD = 3,
    SYSTEM = 4,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChatCommand : pb::GeneratedMessage<ChatCommand, ChatCommand.Builder> {
    private ChatCommand() { }
    private static readonly ChatCommand defaultInstance = new ChatCommand().MakeReadOnly();
    private static readonly string[] _chatCommandFieldNames = new string[] { "Command", "Sender", "UserType" };
    private static readonly uint[] _chatCommandFieldTags = new uint[] { 18, 10, 24 };
    public static ChatCommand DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChatCommand DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChatCommand ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::AsenkronServer.XMessages.Proto.ChatCommand.internal__static_AsenkronServer_XMessages_ChatCommand__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChatCommand, ChatCommand.Builder> InternalFieldAccessors {
      get { return global::AsenkronServer.XMessages.Proto.ChatCommand.internal__static_AsenkronServer_XMessages_ChatCommand__FieldAccessorTable; }
    }
    
    public const int SenderFieldNumber = 1;
    private bool hasSender;
    private string sender_ = "";
    public bool HasSender {
      get { return hasSender; }
    }
    public string Sender {
      get { return sender_; }
    }
    
    public const int CommandFieldNumber = 2;
    private bool hasCommand;
    private string command_ = "";
    public bool HasCommand {
      get { return hasCommand; }
    }
    public string Command {
      get { return command_; }
    }
    
    public const int UserTypeFieldNumber = 3;
    private bool hasUserType;
    private global::AsenkronServer.XMessages.UserType userType_ = global::AsenkronServer.XMessages.UserType.ADMIN;
    public bool HasUserType {
      get { return hasUserType; }
    }
    public global::AsenkronServer.XMessages.UserType UserType {
      get { return userType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSender) return false;
        if (!hasCommand) return false;
        if (!hasUserType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _chatCommandFieldNames;
      if (hasSender) {
        output.WriteString(1, field_names[1], Sender);
      }
      if (hasCommand) {
        output.WriteString(2, field_names[0], Command);
      }
      if (hasUserType) {
        output.WriteEnum(3, field_names[2], (int) UserType, UserType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSender) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Sender);
        }
        if (hasCommand) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Command);
        }
        if (hasUserType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) UserType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChatCommand ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChatCommand ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChatCommand ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChatCommand ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChatCommand ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChatCommand ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChatCommand ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChatCommand ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChatCommand ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChatCommand ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChatCommand MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChatCommand prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChatCommand, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChatCommand cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChatCommand result;
      
      private ChatCommand PrepareBuilder() {
        if (resultIsReadOnly) {
          ChatCommand original = result;
          result = new ChatCommand();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChatCommand MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::AsenkronServer.XMessages.ChatCommand.Descriptor; }
      }
      
      public override ChatCommand DefaultInstanceForType {
        get { return global::AsenkronServer.XMessages.ChatCommand.DefaultInstance; }
      }
      
      public override ChatCommand BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChatCommand) {
          return MergeFrom((ChatCommand) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChatCommand other) {
        if (other == global::AsenkronServer.XMessages.ChatCommand.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSender) {
          Sender = other.Sender;
        }
        if (other.HasCommand) {
          Command = other.Command;
        }
        if (other.HasUserType) {
          UserType = other.UserType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_chatCommandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _chatCommandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSender = input.ReadString(ref result.sender_);
              break;
            }
            case 18: {
              result.hasCommand = input.ReadString(ref result.command_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.userType_, out unknown)) {
                result.hasUserType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSender {
        get { return result.hasSender; }
      }
      public string Sender {
        get { return result.Sender; }
        set { SetSender(value); }
      }
      public Builder SetSender(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSender = true;
        result.sender_ = value;
        return this;
      }
      public Builder ClearSender() {
        PrepareBuilder();
        result.hasSender = false;
        result.sender_ = "";
        return this;
      }
      
      public bool HasCommand {
        get { return result.hasCommand; }
      }
      public string Command {
        get { return result.Command; }
        set { SetCommand(value); }
      }
      public Builder SetCommand(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCommand = true;
        result.command_ = value;
        return this;
      }
      public Builder ClearCommand() {
        PrepareBuilder();
        result.hasCommand = false;
        result.command_ = "";
        return this;
      }
      
      public bool HasUserType {
       get { return result.hasUserType; }
      }
      public global::AsenkronServer.XMessages.UserType UserType {
        get { return result.UserType; }
        set { SetUserType(value); }
      }
      public Builder SetUserType(global::AsenkronServer.XMessages.UserType value) {
        PrepareBuilder();
        result.hasUserType = true;
        result.userType_ = value;
        return this;
      }
      public Builder ClearUserType() {
        PrepareBuilder();
        result.hasUserType = false;
        result.userType_ = global::AsenkronServer.XMessages.UserType.ADMIN;
        return this;
      }
    }
    static ChatCommand() {
      object.ReferenceEquals(global::AsenkronServer.XMessages.Proto.ChatCommand.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
